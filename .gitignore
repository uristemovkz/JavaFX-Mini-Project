import javafx.application.Application;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.stage.Stage;
import javafx.scene.shape.Circle;
import javafx.scene.control.Button;
import javafx.event.ActionEvent;
import javafx.scene.shape.Shape;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Polygon;
import javafx.scene.paint.Color;
import javafx.geometry.Pos;
import javafx.collections.ObservableList;
import javafx.animation.TranslateTransition;
import javafx.util.Duration;
 import javafx.animation.Timeline;
 import javafx.scene.Node;
 public class MiniProject extends Application{
	public  CirclePane cir = new CirclePane(70 , Color.WHITE);
	public SetShape s = new SetShape();
	public Shape currentShape = cir.circle;
	public BorderPane pane = new BorderPane();
	public HBox hBox2 = new HBox(15);
	public HBox hBox1 = new HBox(15);
	public RectanglePane rec = new RectanglePane(140,140);
	public PolygonPane pol = new PolygonPane();
	public Color curColor = Color.WHITE;
	public static TranslateTransition translateTransition = new TranslateTransition();
	@Override
	public void start(Stage primaryStage){
		hBox2.setPadding(new Insets(15 , 20 , 5 , 17));
		pane.setTop(getTop());
		pane.setCenter(hBox2);
		BorderPane.setAlignment(hBox2, Pos.CENTER);
	    Button btShrink = new Button("Shrink");
	    Button btEnLarge = new Button("Enlarge");
		Button btChangeColor = new Button("Change Color");
		Button btSetShape = new Button("Set shape");
		Button btPlay = new Button("Play");
		Button btStop = new Button("Stop");
		hBox2.getChildren().addAll(btEnLarge, btShrink, btChangeColor , btSetShape , btPlay, btStop);
		 btShrink.setOnAction(e ->{
		 if(currentShape instanceof Circle)
			currentShape = cir.shrink();
 		 if(currentShape instanceof Rectangle)
		 	currentShape = rec.shrink();
		 if(currentShape instanceof Polygon)
			currentShape = pol.shrink();
		hBox1.getChildren().add(currentShape);
		});
		 btEnLarge.setOnAction(e ->{
		 	if(currentShape instanceof Circle)
				currentShape = cir.enlarge();
 			if(currentShape instanceof Rectangle)
		 		currentShape = rec.enlarge();
			if(currentShape instanceof Polygon)
				currentShape = pol.enlarge();
		hBox1.getChildren().add(currentShape);
		 });
		btChangeColor.setOnAction(e->{
		 	curColor = Color.color(Math.random(), Math.random(), Math.random());
		 	currentShape.setFill(curColor);
		 });
		btSetShape.setOnAction(e->{
			translateTransition = new TranslateTransition();
			hBox1.getChildren().add(s.newShape(curColor));
		});
		btPlay.setOnAction(e ->{
			translateTransition.setDuration(Duration.millis(4000));
			translateTransition.setAutoReverse(true);
			translateTransition.setCycleCount(Timeline.INDEFINITE);
			translateTransition.setByX(300);
			translateTransition.setNode(currentShape);
			translateTransition.play();
			
		});
		btStop.setOnAction(e ->{
			translateTransition.pause();
		});
		Scene scene = new Scene(pane , 500 , 250);
		primaryStage.setScene(scene);
		primaryStage.setTitle("MiniProject");
		primaryStage.show();
	}
	private HBox getTop(){
		hBox1.setPadding(new Insets(9 ,9 , 19 ,19));
		hBox1.setStyle("-fx-background-color: blue");
		hBox1.getChildren().add(cir.circle);
		return hBox1;
	}
class SetShape {
	public Shape newShape(Color curColor){
		hBox1.getChildren().remove(currentShape);
 		if(currentShape instanceof Circle)
		   currentShape = rec.r;
		else if(currentShape instanceof Rectangle)
			currentShape = pol.p;
		else if(currentShape instanceof Polygon)
			currentShape = cir.circle;
		currentShape.setFill(curColor);
		return currentShape;
	}
}
	class RectanglePane{
		public  Rectangle r = new Rectangle();
		RectanglePane(double w , double h){
			r.setHeight(h);
			r.setWidth(w);
			r.setFill(curColor);
	    	r.setStroke(Color.BLACK);
		}
		public Shape enlarge(){
			r.setWidth(r.getWidth() < 200 ? r.getWidth() + 3 : r.getWidth());
			r.setHeight(r.getHeight() < 200 ? r.getHeight() + 3 : r.getHeight());
			return r;
		}
		public Shape shrink(){
			r.setWidth(r.getWidth() > 5 ? r.getWidth() - 3 : r.getWidth());
			r.setHeight(r.getHeight() > 5 ? r.getHeight() - 3 : r.getHeight());
			return r;
		}
	}
	class PolygonPane{
		public  Polygon p = new Polygon();
		ObservableList<Double> list = p.getPoints();
		double x1 = 100;
		double y1 = 150;
		double x2 = 200;
		double y2 = 50;
		double x3 = 300;
		double y3 = 150;
        PolygonPane(){
			p.setFill(curColor);
	    	p.setStroke(Color.BLACK);
			p.getPoints().setAll(x1,y1,x2,y2,x3,y3);
		}
		public Shape enlarge(){
			list.removeAll(x1,y1,x2,y2,x3,y3);
			if(y2 < 80 && x1 > 0)
			x1-=3;y1+=3;y2-=3;x3+=3;y3+=3;
			list.addAll(x1,y1,x2,y2,x3,y3);
			return p;
		}
		public Shape shrink(){
			list.removeAll(x1,y1,x2,y2,x3,y3);
			if(y2 < y1)
			x1+=3;y1-=3;y2+=3;x3-=3;y3-=3;
			list.addAll(x1,y1,x2,y2,x3,y3);
			return p;
		}
	}
	class CirclePane{
		public Circle circle = new Circle();
		CirclePane(double r, Color curColor){
			circle.setRadius(r);
			circle.setFill(curColor);
	    	circle.setStroke(Color.BLACK);
		}
		public Shape enlarge(){
			circle.setRadius(circle.getRadius() < 100 ?
 			circle.getRadius() + 3 : circle.getRadius());
			return circle;
		}
		public Shape shrink(){
			circle.setRadius(circle.getRadius() > 5 ?
 			circle.getRadius() - 3 : circle.getRadius());
			return circle;
		}
	}
}
